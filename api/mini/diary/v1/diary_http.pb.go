// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.8.0
// - protoc             v4.22.0
// source: mini/diary/v1/diary.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationDiaryCreateDiary = "/api.mini.diary.v1.Diary/CreateDiary"
const OperationDiaryDeleteDiary = "/api.mini.diary.v1.Diary/DeleteDiary"
const OperationDiaryGetDiary = "/api.mini.diary.v1.Diary/GetDiary"
const OperationDiaryListDiary = "/api.mini.diary.v1.Diary/ListDiary"
const OperationDiaryUpdateDiary = "/api.mini.diary.v1.Diary/UpdateDiary"

type DiaryHTTPServer interface {
	// CreateDiary 日志创建
	CreateDiary(context.Context, *CreateDiaryReq) (*CreateDiaryResp, error)
	// DeleteDiary 日志删除
	DeleteDiary(context.Context, *DeleteDiaryReq) (*DeleteDiaryResp, error)
	// GetDiary 日志详情
	GetDiary(context.Context, *GetDiaryReq) (*GetDiaryResp, error)
	// ListDiary 日志列表
	ListDiary(context.Context, *ListDiaryReq) (*ListDiaryResp, error)
	// UpdateDiary 日志修改
	UpdateDiary(context.Context, *UpdateDiaryReq) (*UpdateDiaryResp, error)
}

func RegisterDiaryHTTPServer(s *http.Server, srv DiaryHTTPServer) {
	r := s.Route("/")
	r.GET("/api/v1/diary", _Diary_ListDiary0_HTTP_Handler(srv))
	r.GET("/api/v1/diary/{id}", _Diary_GetDiary0_HTTP_Handler(srv))
	r.POST("/api/v1/diary", _Diary_CreateDiary0_HTTP_Handler(srv))
	r.PUT("/api/v1/diary/{id}", _Diary_UpdateDiary0_HTTP_Handler(srv))
	r.DELETE("/api/v1/diary/{id}", _Diary_DeleteDiary0_HTTP_Handler(srv))
}

func _Diary_ListDiary0_HTTP_Handler(srv DiaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListDiaryReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiaryListDiary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListDiary(ctx, req.(*ListDiaryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListDiaryResp)
		return ctx.Result(200, reply)
	}
}

func _Diary_GetDiary0_HTTP_Handler(srv DiaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetDiaryReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiaryGetDiary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetDiary(ctx, req.(*GetDiaryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetDiaryResp)
		return ctx.Result(200, reply)
	}
}

func _Diary_CreateDiary0_HTTP_Handler(srv DiaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateDiaryReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiaryCreateDiary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateDiary(ctx, req.(*CreateDiaryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateDiaryResp)
		return ctx.Result(200, reply)
	}
}

func _Diary_UpdateDiary0_HTTP_Handler(srv DiaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateDiaryReq
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiaryUpdateDiary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateDiary(ctx, req.(*UpdateDiaryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateDiaryResp)
		return ctx.Result(200, reply)
	}
}

func _Diary_DeleteDiary0_HTTP_Handler(srv DiaryHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteDiaryReq
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationDiaryDeleteDiary)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteDiary(ctx, req.(*DeleteDiaryReq))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteDiaryResp)
		return ctx.Result(200, reply)
	}
}

type DiaryHTTPClient interface {
	CreateDiary(ctx context.Context, req *CreateDiaryReq, opts ...http.CallOption) (rsp *CreateDiaryResp, err error)
	DeleteDiary(ctx context.Context, req *DeleteDiaryReq, opts ...http.CallOption) (rsp *DeleteDiaryResp, err error)
	GetDiary(ctx context.Context, req *GetDiaryReq, opts ...http.CallOption) (rsp *GetDiaryResp, err error)
	ListDiary(ctx context.Context, req *ListDiaryReq, opts ...http.CallOption) (rsp *ListDiaryResp, err error)
	UpdateDiary(ctx context.Context, req *UpdateDiaryReq, opts ...http.CallOption) (rsp *UpdateDiaryResp, err error)
}

type DiaryHTTPClientImpl struct {
	cc *http.Client
}

func NewDiaryHTTPClient(client *http.Client) DiaryHTTPClient {
	return &DiaryHTTPClientImpl{client}
}

func (c *DiaryHTTPClientImpl) CreateDiary(ctx context.Context, in *CreateDiaryReq, opts ...http.CallOption) (*CreateDiaryResp, error) {
	var out CreateDiaryResp
	pattern := "/api/v1/diary"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDiaryCreateDiary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DiaryHTTPClientImpl) DeleteDiary(ctx context.Context, in *DeleteDiaryReq, opts ...http.CallOption) (*DeleteDiaryResp, error) {
	var out DeleteDiaryResp
	pattern := "/api/v1/diary/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDiaryDeleteDiary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DiaryHTTPClientImpl) GetDiary(ctx context.Context, in *GetDiaryReq, opts ...http.CallOption) (*GetDiaryResp, error) {
	var out GetDiaryResp
	pattern := "/api/v1/diary/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDiaryGetDiary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DiaryHTTPClientImpl) ListDiary(ctx context.Context, in *ListDiaryReq, opts ...http.CallOption) (*ListDiaryResp, error) {
	var out ListDiaryResp
	pattern := "/api/v1/diary"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationDiaryListDiary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *DiaryHTTPClientImpl) UpdateDiary(ctx context.Context, in *UpdateDiaryReq, opts ...http.CallOption) (*UpdateDiaryResp, error) {
	var out UpdateDiaryResp
	pattern := "/api/v1/diary/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationDiaryUpdateDiary))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
