// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: mini/diary/v1/diary.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on DeleteDiaryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *DeleteDiaryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDiaryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeleteDiaryReqMultiError,
// or nil if none found.
func (m *DeleteDiaryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDiaryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDiaryReqMultiError(errors)
	}

	return nil
}

// DeleteDiaryReqMultiError is an error wrapping multiple validation errors
// returned by DeleteDiaryReq.ValidateAll() if the designated constraints
// aren't met.
type DeleteDiaryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDiaryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDiaryReqMultiError) AllErrors() []error { return m }

// DeleteDiaryReqValidationError is the validation error returned by
// DeleteDiaryReq.Validate if the designated constraints aren't met.
type DeleteDiaryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDiaryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDiaryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDiaryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDiaryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDiaryReqValidationError) ErrorName() string { return "DeleteDiaryReqValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDiaryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDiaryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDiaryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDiaryReqValidationError{}

// Validate checks the field values on DeleteDiaryResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteDiaryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteDiaryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteDiaryRespMultiError, or nil if none found.
func (m *DeleteDiaryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteDiaryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return DeleteDiaryRespMultiError(errors)
	}

	return nil
}

// DeleteDiaryRespMultiError is an error wrapping multiple validation errors
// returned by DeleteDiaryResp.ValidateAll() if the designated constraints
// aren't met.
type DeleteDiaryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteDiaryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteDiaryRespMultiError) AllErrors() []error { return m }

// DeleteDiaryRespValidationError is the validation error returned by
// DeleteDiaryResp.Validate if the designated constraints aren't met.
type DeleteDiaryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteDiaryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteDiaryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteDiaryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteDiaryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteDiaryRespValidationError) ErrorName() string { return "DeleteDiaryRespValidationError" }

// Error satisfies the builtin error interface
func (e DeleteDiaryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteDiaryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteDiaryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteDiaryRespValidationError{}

// Validate checks the field values on UpdateDiaryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UpdateDiaryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiaryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UpdateDiaryReqMultiError,
// or nil if none found.
func (m *UpdateDiaryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiaryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for BelongAt

	// no validation rules for Tag

	if len(errors) > 0 {
		return UpdateDiaryReqMultiError(errors)
	}

	return nil
}

// UpdateDiaryReqMultiError is an error wrapping multiple validation errors
// returned by UpdateDiaryReq.ValidateAll() if the designated constraints
// aren't met.
type UpdateDiaryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiaryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiaryReqMultiError) AllErrors() []error { return m }

// UpdateDiaryReqValidationError is the validation error returned by
// UpdateDiaryReq.Validate if the designated constraints aren't met.
type UpdateDiaryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiaryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiaryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiaryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiaryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiaryReqValidationError) ErrorName() string { return "UpdateDiaryReqValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDiaryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiaryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiaryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiaryReqValidationError{}

// Validate checks the field values on UpdateDiaryResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpdateDiaryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateDiaryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateDiaryRespMultiError, or nil if none found.
func (m *UpdateDiaryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateDiaryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return UpdateDiaryRespMultiError(errors)
	}

	return nil
}

// UpdateDiaryRespMultiError is an error wrapping multiple validation errors
// returned by UpdateDiaryResp.ValidateAll() if the designated constraints
// aren't met.
type UpdateDiaryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateDiaryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateDiaryRespMultiError) AllErrors() []error { return m }

// UpdateDiaryRespValidationError is the validation error returned by
// UpdateDiaryResp.Validate if the designated constraints aren't met.
type UpdateDiaryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateDiaryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateDiaryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateDiaryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateDiaryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateDiaryRespValidationError) ErrorName() string { return "UpdateDiaryRespValidationError" }

// Error satisfies the builtin error interface
func (e UpdateDiaryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateDiaryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateDiaryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateDiaryRespValidationError{}

// Validate checks the field values on CreateDiaryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CreateDiaryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiaryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CreateDiaryReqMultiError,
// or nil if none found.
func (m *CreateDiaryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiaryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Title

	// no validation rules for Content

	// no validation rules for BelongAt

	// no validation rules for Tag

	if len(errors) > 0 {
		return CreateDiaryReqMultiError(errors)
	}

	return nil
}

// CreateDiaryReqMultiError is an error wrapping multiple validation errors
// returned by CreateDiaryReq.ValidateAll() if the designated constraints
// aren't met.
type CreateDiaryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiaryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiaryReqMultiError) AllErrors() []error { return m }

// CreateDiaryReqValidationError is the validation error returned by
// CreateDiaryReq.Validate if the designated constraints aren't met.
type CreateDiaryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiaryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiaryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiaryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiaryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiaryReqValidationError) ErrorName() string { return "CreateDiaryReqValidationError" }

// Error satisfies the builtin error interface
func (e CreateDiaryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiaryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiaryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiaryReqValidationError{}

// Validate checks the field values on CreateDiaryResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateDiaryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateDiaryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateDiaryRespMultiError, or nil if none found.
func (m *CreateDiaryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateDiaryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return CreateDiaryRespMultiError(errors)
	}

	return nil
}

// CreateDiaryRespMultiError is an error wrapping multiple validation errors
// returned by CreateDiaryResp.ValidateAll() if the designated constraints
// aren't met.
type CreateDiaryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateDiaryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateDiaryRespMultiError) AllErrors() []error { return m }

// CreateDiaryRespValidationError is the validation error returned by
// CreateDiaryResp.Validate if the designated constraints aren't met.
type CreateDiaryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateDiaryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateDiaryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateDiaryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateDiaryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateDiaryRespValidationError) ErrorName() string { return "CreateDiaryRespValidationError" }

// Error satisfies the builtin error interface
func (e CreateDiaryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateDiaryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateDiaryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateDiaryRespValidationError{}

// Validate checks the field values on GetDiaryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDiaryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiaryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDiaryReqMultiError, or
// nil if none found.
func (m *GetDiaryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiaryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetDiaryReqMultiError(errors)
	}

	return nil
}

// GetDiaryReqMultiError is an error wrapping multiple validation errors
// returned by GetDiaryReq.ValidateAll() if the designated constraints aren't met.
type GetDiaryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiaryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiaryReqMultiError) AllErrors() []error { return m }

// GetDiaryReqValidationError is the validation error returned by
// GetDiaryReq.Validate if the designated constraints aren't met.
type GetDiaryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiaryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiaryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiaryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiaryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiaryReqValidationError) ErrorName() string { return "GetDiaryReqValidationError" }

// Error satisfies the builtin error interface
func (e GetDiaryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiaryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiaryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiaryReqValidationError{}

// Validate checks the field values on GetDiaryResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetDiaryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDiaryResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetDiaryRespMultiError, or
// nil if none found.
func (m *GetDiaryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDiaryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Content

	// no validation rules for BelongAt

	// no validation rules for Tag

	if len(errors) > 0 {
		return GetDiaryRespMultiError(errors)
	}

	return nil
}

// GetDiaryRespMultiError is an error wrapping multiple validation errors
// returned by GetDiaryResp.ValidateAll() if the designated constraints aren't met.
type GetDiaryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDiaryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDiaryRespMultiError) AllErrors() []error { return m }

// GetDiaryRespValidationError is the validation error returned by
// GetDiaryResp.Validate if the designated constraints aren't met.
type GetDiaryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDiaryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDiaryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDiaryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDiaryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDiaryRespValidationError) ErrorName() string { return "GetDiaryRespValidationError" }

// Error satisfies the builtin error interface
func (e GetDiaryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDiaryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDiaryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDiaryRespValidationError{}

// Validate checks the field values on ListDiaryReq with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDiaryReq) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDiaryReq with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDiaryReqMultiError, or
// nil if none found.
func (m *ListDiaryReq) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDiaryReq) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Page

	// no validation rules for PageSize

	// no validation rules for Keywords

	// no validation rules for StartAt

	// no validation rules for EndAt

	if len(errors) > 0 {
		return ListDiaryReqMultiError(errors)
	}

	return nil
}

// ListDiaryReqMultiError is an error wrapping multiple validation errors
// returned by ListDiaryReq.ValidateAll() if the designated constraints aren't met.
type ListDiaryReqMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDiaryReqMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDiaryReqMultiError) AllErrors() []error { return m }

// ListDiaryReqValidationError is the validation error returned by
// ListDiaryReq.Validate if the designated constraints aren't met.
type ListDiaryReqValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDiaryReqValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDiaryReqValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDiaryReqValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDiaryReqValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDiaryReqValidationError) ErrorName() string { return "ListDiaryReqValidationError" }

// Error satisfies the builtin error interface
func (e ListDiaryReqValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDiaryReq.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDiaryReqValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDiaryReqValidationError{}

// Validate checks the field values on ListDiaryResp with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ListDiaryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListDiaryResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ListDiaryRespMultiError, or
// nil if none found.
func (m *ListDiaryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListDiaryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Total

	for idx, item := range m.GetList() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListDiaryRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListDiaryRespValidationError{
						field:  fmt.Sprintf("List[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListDiaryRespValidationError{
					field:  fmt.Sprintf("List[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListDiaryRespMultiError(errors)
	}

	return nil
}

// ListDiaryRespMultiError is an error wrapping multiple validation errors
// returned by ListDiaryResp.ValidateAll() if the designated constraints
// aren't met.
type ListDiaryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListDiaryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListDiaryRespMultiError) AllErrors() []error { return m }

// ListDiaryRespValidationError is the validation error returned by
// ListDiaryResp.Validate if the designated constraints aren't met.
type ListDiaryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListDiaryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListDiaryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListDiaryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListDiaryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListDiaryRespValidationError) ErrorName() string { return "ListDiaryRespValidationError" }

// Error satisfies the builtin error interface
func (e ListDiaryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListDiaryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListDiaryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListDiaryRespValidationError{}

// Validate checks the field values on ListItemDiaryResp with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListItemDiaryResp) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListItemDiaryResp with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListItemDiaryRespMultiError, or nil if none found.
func (m *ListItemDiaryResp) ValidateAll() error {
	return m.validate(true)
}

func (m *ListItemDiaryResp) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	// no validation rules for CreatedAt

	// no validation rules for UpdatedAt

	// no validation rules for Desc

	// no validation rules for BelongAt

	// no validation rules for Tag

	if len(errors) > 0 {
		return ListItemDiaryRespMultiError(errors)
	}

	return nil
}

// ListItemDiaryRespMultiError is an error wrapping multiple validation errors
// returned by ListItemDiaryResp.ValidateAll() if the designated constraints
// aren't met.
type ListItemDiaryRespMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListItemDiaryRespMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListItemDiaryRespMultiError) AllErrors() []error { return m }

// ListItemDiaryRespValidationError is the validation error returned by
// ListItemDiaryResp.Validate if the designated constraints aren't met.
type ListItemDiaryRespValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListItemDiaryRespValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListItemDiaryRespValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListItemDiaryRespValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListItemDiaryRespValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListItemDiaryRespValidationError) ErrorName() string {
	return "ListItemDiaryRespValidationError"
}

// Error satisfies the builtin error interface
func (e ListItemDiaryRespValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListItemDiaryResp.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListItemDiaryRespValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListItemDiaryRespValidationError{}
