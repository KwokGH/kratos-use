// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/go-kratos/kratos/v2"
	"github.com/go-kratos/kratos/v2/log"
	"kratos-use/ent/schema/dbo/mysql"
	"kratos-use/internal/biz"
	"kratos-use/internal/conf"
	"kratos-use/internal/data"
	"kratos-use/internal/server"
	"kratos-use/internal/service"
)

import (
	_ "go.uber.org/automaxprocs"
	_ "kratos-use/ent/runtime"
)

// Injectors from wire.go:

// wireApp init kratos application.
func wireApp(bootstrap *conf.Bootstrap, logger log.Logger) (*kratos.App, func(), error) {
	commonService := service.NewCommonService()
	client, err := data.NewDB(bootstrap)
	if err != nil {
		return nil, nil, err
	}
	baseDBData := mysql.NewBaseDBData(client)
	dataData, cleanup, err := data.NewData(bootstrap, baseDBData)
	if err != nil {
		return nil, nil, err
	}
	userRepo := data.NewUserRepo(dataData, logger)
	transaction := data.NewTransaction(dataData)
	userUsecase := biz.NewUserUsecase(userRepo, transaction, bootstrap, logger)
	userService := service.NewUserService(userUsecase)
	diaryRepo := data.NewDiaryRepo(dataData, logger, userRepo)
	diaryUsecase := biz.NewDiaryUsecase(diaryRepo, transaction, logger)
	diaryService := service.NewDiaryService(diaryUsecase)
	httpServer := server.NewHTTPServer(bootstrap, logger, commonService, userService, diaryService)
	app := newApp(logger, httpServer)
	return app, func() {
		cleanup()
	}, nil
}
