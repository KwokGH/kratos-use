// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-use/ent/diary"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiaryCreate is the builder for creating a Diary entity.
type DiaryCreate struct {
	config
	mutation *DiaryMutation
	hooks    []Hook
}

// SetDeletedAt sets the "deleted_at" field.
func (dc *DiaryCreate) SetDeletedAt(i int64) *DiaryCreate {
	dc.mutation.SetDeletedAt(i)
	return dc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (dc *DiaryCreate) SetNillableDeletedAt(i *int64) *DiaryCreate {
	if i != nil {
		dc.SetDeletedAt(*i)
	}
	return dc
}

// SetCreatedAt sets the "created_at" field.
func (dc *DiaryCreate) SetCreatedAt(i int64) *DiaryCreate {
	dc.mutation.SetCreatedAt(i)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DiaryCreate) SetNillableCreatedAt(i *int64) *DiaryCreate {
	if i != nil {
		dc.SetCreatedAt(*i)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DiaryCreate) SetUpdatedAt(i int64) *DiaryCreate {
	dc.mutation.SetUpdatedAt(i)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DiaryCreate) SetNillableUpdatedAt(i *int64) *DiaryCreate {
	if i != nil {
		dc.SetUpdatedAt(*i)
	}
	return dc
}

// SetTitle sets the "title" field.
func (dc *DiaryCreate) SetTitle(s string) *DiaryCreate {
	dc.mutation.SetTitle(s)
	return dc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (dc *DiaryCreate) SetNillableTitle(s *string) *DiaryCreate {
	if s != nil {
		dc.SetTitle(*s)
	}
	return dc
}

// SetContent sets the "content" field.
func (dc *DiaryCreate) SetContent(s string) *DiaryCreate {
	dc.mutation.SetContent(s)
	return dc
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (dc *DiaryCreate) SetNillableContent(s *string) *DiaryCreate {
	if s != nil {
		dc.SetContent(*s)
	}
	return dc
}

// SetBelongAt sets the "belong_at" field.
func (dc *DiaryCreate) SetBelongAt(i int64) *DiaryCreate {
	dc.mutation.SetBelongAt(i)
	return dc
}

// SetNillableBelongAt sets the "belong_at" field if the given value is not nil.
func (dc *DiaryCreate) SetNillableBelongAt(i *int64) *DiaryCreate {
	if i != nil {
		dc.SetBelongAt(*i)
	}
	return dc
}

// SetUserID sets the "user_id" field.
func (dc *DiaryCreate) SetUserID(s string) *DiaryCreate {
	dc.mutation.SetUserID(s)
	return dc
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (dc *DiaryCreate) SetNillableUserID(s *string) *DiaryCreate {
	if s != nil {
		dc.SetUserID(*s)
	}
	return dc
}

// SetTag sets the "tag" field.
func (dc *DiaryCreate) SetTag(s string) *DiaryCreate {
	dc.mutation.SetTag(s)
	return dc
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (dc *DiaryCreate) SetNillableTag(s *string) *DiaryCreate {
	if s != nil {
		dc.SetTag(*s)
	}
	return dc
}

// SetID sets the "id" field.
func (dc *DiaryCreate) SetID(s string) *DiaryCreate {
	dc.mutation.SetID(s)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DiaryCreate) SetNillableID(s *string) *DiaryCreate {
	if s != nil {
		dc.SetID(*s)
	}
	return dc
}

// Mutation returns the DiaryMutation object of the builder.
func (dc *DiaryCreate) Mutation() *DiaryMutation {
	return dc.mutation
}

// Save creates the Diary in the database.
func (dc *DiaryCreate) Save(ctx context.Context) (*Diary, error) {
	if err := dc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DiaryCreate) SaveX(ctx context.Context) *Diary {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DiaryCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DiaryCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DiaryCreate) defaults() error {
	if _, ok := dc.mutation.DeletedAt(); !ok {
		v := diary.DefaultDeletedAt
		dc.mutation.SetDeletedAt(v)
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := diary.DefaultCreatedAt
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := diary.DefaultUpdatedAt
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.Title(); !ok {
		v := diary.DefaultTitle
		dc.mutation.SetTitle(v)
	}
	if _, ok := dc.mutation.Content(); !ok {
		v := diary.DefaultContent
		dc.mutation.SetContent(v)
	}
	if _, ok := dc.mutation.BelongAt(); !ok {
		v := diary.DefaultBelongAt
		dc.mutation.SetBelongAt(v)
	}
	if _, ok := dc.mutation.UserID(); !ok {
		v := diary.DefaultUserID
		dc.mutation.SetUserID(v)
	}
	if _, ok := dc.mutation.Tag(); !ok {
		v := diary.DefaultTag
		dc.mutation.SetTag(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		if diary.DefaultID == nil {
			return fmt.Errorf("ent: uninitialized diary.DefaultID (forgotten import ent/runtime?)")
		}
		v := diary.DefaultID()
		dc.mutation.SetID(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (dc *DiaryCreate) check() error {
	if _, ok := dc.mutation.DeletedAt(); !ok {
		return &ValidationError{Name: "deleted_at", err: errors.New(`ent: missing required field "Diary.deleted_at"`)}
	}
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Diary.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Diary.updated_at"`)}
	}
	if _, ok := dc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Diary.title"`)}
	}
	if _, ok := dc.mutation.Content(); !ok {
		return &ValidationError{Name: "content", err: errors.New(`ent: missing required field "Diary.content"`)}
	}
	if _, ok := dc.mutation.BelongAt(); !ok {
		return &ValidationError{Name: "belong_at", err: errors.New(`ent: missing required field "Diary.belong_at"`)}
	}
	if _, ok := dc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Diary.user_id"`)}
	}
	if _, ok := dc.mutation.Tag(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required field "Diary.tag"`)}
	}
	if v, ok := dc.mutation.ID(); ok {
		if err := diary.IDValidator(v); err != nil {
			return &ValidationError{Name: "id", err: fmt.Errorf(`ent: validator failed for field "Diary.id": %w`, err)}
		}
	}
	return nil
}

func (dc *DiaryCreate) sqlSave(ctx context.Context) (*Diary, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Diary.ID type: %T", _spec.ID.Value)
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DiaryCreate) createSpec() (*Diary, *sqlgraph.CreateSpec) {
	var (
		_node = &Diary{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(diary.Table, sqlgraph.NewFieldSpec(diary.FieldID, field.TypeString))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := dc.mutation.DeletedAt(); ok {
		_spec.SetField(diary.FieldDeletedAt, field.TypeInt64, value)
		_node.DeletedAt = value
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(diary.FieldCreatedAt, field.TypeInt64, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(diary.FieldUpdatedAt, field.TypeInt64, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.Title(); ok {
		_spec.SetField(diary.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := dc.mutation.Content(); ok {
		_spec.SetField(diary.FieldContent, field.TypeString, value)
		_node.Content = value
	}
	if value, ok := dc.mutation.BelongAt(); ok {
		_spec.SetField(diary.FieldBelongAt, field.TypeInt64, value)
		_node.BelongAt = value
	}
	if value, ok := dc.mutation.UserID(); ok {
		_spec.SetField(diary.FieldUserID, field.TypeString, value)
		_node.UserID = value
	}
	if value, ok := dc.mutation.Tag(); ok {
		_spec.SetField(diary.FieldTag, field.TypeString, value)
		_node.Tag = value
	}
	return _node, _spec
}

// DiaryCreateBulk is the builder for creating many Diary entities in bulk.
type DiaryCreateBulk struct {
	config
	err      error
	builders []*DiaryCreate
}

// Save creates the Diary entities in the database.
func (dcb *DiaryCreateBulk) Save(ctx context.Context) ([]*Diary, error) {
	if dcb.err != nil {
		return nil, dcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Diary, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DiaryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DiaryCreateBulk) SaveX(ctx context.Context) []*Diary {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DiaryCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DiaryCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
