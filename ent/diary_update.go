// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"kratos-use/ent/diary"
	"kratos-use/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// DiaryUpdate is the builder for updating Diary entities.
type DiaryUpdate struct {
	config
	hooks    []Hook
	mutation *DiaryMutation
}

// Where appends a list predicates to the DiaryUpdate builder.
func (du *DiaryUpdate) Where(ps ...predicate.Diary) *DiaryUpdate {
	du.mutation.Where(ps...)
	return du
}

// SetDeletedAt sets the "deleted_at" field.
func (du *DiaryUpdate) SetDeletedAt(i int64) *DiaryUpdate {
	du.mutation.ResetDeletedAt()
	du.mutation.SetDeletedAt(i)
	return du
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (du *DiaryUpdate) SetNillableDeletedAt(i *int64) *DiaryUpdate {
	if i != nil {
		du.SetDeletedAt(*i)
	}
	return du
}

// AddDeletedAt adds i to the "deleted_at" field.
func (du *DiaryUpdate) AddDeletedAt(i int64) *DiaryUpdate {
	du.mutation.AddDeletedAt(i)
	return du
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (du *DiaryUpdate) ClearDeletedAt() *DiaryUpdate {
	du.mutation.ClearDeletedAt()
	return du
}

// SetCreatedAt sets the "created_at" field.
func (du *DiaryUpdate) SetCreatedAt(i int64) *DiaryUpdate {
	du.mutation.ResetCreatedAt()
	du.mutation.SetCreatedAt(i)
	return du
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (du *DiaryUpdate) SetNillableCreatedAt(i *int64) *DiaryUpdate {
	if i != nil {
		du.SetCreatedAt(*i)
	}
	return du
}

// AddCreatedAt adds i to the "created_at" field.
func (du *DiaryUpdate) AddCreatedAt(i int64) *DiaryUpdate {
	du.mutation.AddCreatedAt(i)
	return du
}

// SetUpdatedAt sets the "updated_at" field.
func (du *DiaryUpdate) SetUpdatedAt(i int64) *DiaryUpdate {
	du.mutation.ResetUpdatedAt()
	du.mutation.SetUpdatedAt(i)
	return du
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (du *DiaryUpdate) SetNillableUpdatedAt(i *int64) *DiaryUpdate {
	if i != nil {
		du.SetUpdatedAt(*i)
	}
	return du
}

// AddUpdatedAt adds i to the "updated_at" field.
func (du *DiaryUpdate) AddUpdatedAt(i int64) *DiaryUpdate {
	du.mutation.AddUpdatedAt(i)
	return du
}

// SetTitle sets the "title" field.
func (du *DiaryUpdate) SetTitle(s string) *DiaryUpdate {
	du.mutation.SetTitle(s)
	return du
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (du *DiaryUpdate) SetNillableTitle(s *string) *DiaryUpdate {
	if s != nil {
		du.SetTitle(*s)
	}
	return du
}

// SetContent sets the "content" field.
func (du *DiaryUpdate) SetContent(s string) *DiaryUpdate {
	du.mutation.SetContent(s)
	return du
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (du *DiaryUpdate) SetNillableContent(s *string) *DiaryUpdate {
	if s != nil {
		du.SetContent(*s)
	}
	return du
}

// SetBelongAt sets the "belong_at" field.
func (du *DiaryUpdate) SetBelongAt(i int64) *DiaryUpdate {
	du.mutation.ResetBelongAt()
	du.mutation.SetBelongAt(i)
	return du
}

// SetNillableBelongAt sets the "belong_at" field if the given value is not nil.
func (du *DiaryUpdate) SetNillableBelongAt(i *int64) *DiaryUpdate {
	if i != nil {
		du.SetBelongAt(*i)
	}
	return du
}

// AddBelongAt adds i to the "belong_at" field.
func (du *DiaryUpdate) AddBelongAt(i int64) *DiaryUpdate {
	du.mutation.AddBelongAt(i)
	return du
}

// SetUserID sets the "user_id" field.
func (du *DiaryUpdate) SetUserID(s string) *DiaryUpdate {
	du.mutation.SetUserID(s)
	return du
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (du *DiaryUpdate) SetNillableUserID(s *string) *DiaryUpdate {
	if s != nil {
		du.SetUserID(*s)
	}
	return du
}

// SetTag sets the "tag" field.
func (du *DiaryUpdate) SetTag(s string) *DiaryUpdate {
	du.mutation.SetTag(s)
	return du
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (du *DiaryUpdate) SetNillableTag(s *string) *DiaryUpdate {
	if s != nil {
		du.SetTag(*s)
	}
	return du
}

// Mutation returns the DiaryMutation object of the builder.
func (du *DiaryUpdate) Mutation() *DiaryMutation {
	return du.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (du *DiaryUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, du.sqlSave, du.mutation, du.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (du *DiaryUpdate) SaveX(ctx context.Context) int {
	affected, err := du.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (du *DiaryUpdate) Exec(ctx context.Context) error {
	_, err := du.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (du *DiaryUpdate) ExecX(ctx context.Context) {
	if err := du.Exec(ctx); err != nil {
		panic(err)
	}
}

func (du *DiaryUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(diary.Table, diary.Columns, sqlgraph.NewFieldSpec(diary.FieldID, field.TypeString))
	if ps := du.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := du.mutation.DeletedAt(); ok {
		_spec.SetField(diary.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedDeletedAt(); ok {
		_spec.AddField(diary.FieldDeletedAt, field.TypeInt64, value)
	}
	if du.mutation.DeletedAtCleared() {
		_spec.ClearField(diary.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := du.mutation.CreatedAt(); ok {
		_spec.SetField(diary.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedCreatedAt(); ok {
		_spec.AddField(diary.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.UpdatedAt(); ok {
		_spec.SetField(diary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(diary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.Title(); ok {
		_spec.SetField(diary.FieldTitle, field.TypeString, value)
	}
	if value, ok := du.mutation.Content(); ok {
		_spec.SetField(diary.FieldContent, field.TypeString, value)
	}
	if value, ok := du.mutation.BelongAt(); ok {
		_spec.SetField(diary.FieldBelongAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.AddedBelongAt(); ok {
		_spec.AddField(diary.FieldBelongAt, field.TypeInt64, value)
	}
	if value, ok := du.mutation.UserID(); ok {
		_spec.SetField(diary.FieldUserID, field.TypeString, value)
	}
	if value, ok := du.mutation.Tag(); ok {
		_spec.SetField(diary.FieldTag, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, du.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{diary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	du.mutation.done = true
	return n, nil
}

// DiaryUpdateOne is the builder for updating a single Diary entity.
type DiaryUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *DiaryMutation
}

// SetDeletedAt sets the "deleted_at" field.
func (duo *DiaryUpdateOne) SetDeletedAt(i int64) *DiaryUpdateOne {
	duo.mutation.ResetDeletedAt()
	duo.mutation.SetDeletedAt(i)
	return duo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (duo *DiaryUpdateOne) SetNillableDeletedAt(i *int64) *DiaryUpdateOne {
	if i != nil {
		duo.SetDeletedAt(*i)
	}
	return duo
}

// AddDeletedAt adds i to the "deleted_at" field.
func (duo *DiaryUpdateOne) AddDeletedAt(i int64) *DiaryUpdateOne {
	duo.mutation.AddDeletedAt(i)
	return duo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (duo *DiaryUpdateOne) ClearDeletedAt() *DiaryUpdateOne {
	duo.mutation.ClearDeletedAt()
	return duo
}

// SetCreatedAt sets the "created_at" field.
func (duo *DiaryUpdateOne) SetCreatedAt(i int64) *DiaryUpdateOne {
	duo.mutation.ResetCreatedAt()
	duo.mutation.SetCreatedAt(i)
	return duo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (duo *DiaryUpdateOne) SetNillableCreatedAt(i *int64) *DiaryUpdateOne {
	if i != nil {
		duo.SetCreatedAt(*i)
	}
	return duo
}

// AddCreatedAt adds i to the "created_at" field.
func (duo *DiaryUpdateOne) AddCreatedAt(i int64) *DiaryUpdateOne {
	duo.mutation.AddCreatedAt(i)
	return duo
}

// SetUpdatedAt sets the "updated_at" field.
func (duo *DiaryUpdateOne) SetUpdatedAt(i int64) *DiaryUpdateOne {
	duo.mutation.ResetUpdatedAt()
	duo.mutation.SetUpdatedAt(i)
	return duo
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (duo *DiaryUpdateOne) SetNillableUpdatedAt(i *int64) *DiaryUpdateOne {
	if i != nil {
		duo.SetUpdatedAt(*i)
	}
	return duo
}

// AddUpdatedAt adds i to the "updated_at" field.
func (duo *DiaryUpdateOne) AddUpdatedAt(i int64) *DiaryUpdateOne {
	duo.mutation.AddUpdatedAt(i)
	return duo
}

// SetTitle sets the "title" field.
func (duo *DiaryUpdateOne) SetTitle(s string) *DiaryUpdateOne {
	duo.mutation.SetTitle(s)
	return duo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (duo *DiaryUpdateOne) SetNillableTitle(s *string) *DiaryUpdateOne {
	if s != nil {
		duo.SetTitle(*s)
	}
	return duo
}

// SetContent sets the "content" field.
func (duo *DiaryUpdateOne) SetContent(s string) *DiaryUpdateOne {
	duo.mutation.SetContent(s)
	return duo
}

// SetNillableContent sets the "content" field if the given value is not nil.
func (duo *DiaryUpdateOne) SetNillableContent(s *string) *DiaryUpdateOne {
	if s != nil {
		duo.SetContent(*s)
	}
	return duo
}

// SetBelongAt sets the "belong_at" field.
func (duo *DiaryUpdateOne) SetBelongAt(i int64) *DiaryUpdateOne {
	duo.mutation.ResetBelongAt()
	duo.mutation.SetBelongAt(i)
	return duo
}

// SetNillableBelongAt sets the "belong_at" field if the given value is not nil.
func (duo *DiaryUpdateOne) SetNillableBelongAt(i *int64) *DiaryUpdateOne {
	if i != nil {
		duo.SetBelongAt(*i)
	}
	return duo
}

// AddBelongAt adds i to the "belong_at" field.
func (duo *DiaryUpdateOne) AddBelongAt(i int64) *DiaryUpdateOne {
	duo.mutation.AddBelongAt(i)
	return duo
}

// SetUserID sets the "user_id" field.
func (duo *DiaryUpdateOne) SetUserID(s string) *DiaryUpdateOne {
	duo.mutation.SetUserID(s)
	return duo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (duo *DiaryUpdateOne) SetNillableUserID(s *string) *DiaryUpdateOne {
	if s != nil {
		duo.SetUserID(*s)
	}
	return duo
}

// SetTag sets the "tag" field.
func (duo *DiaryUpdateOne) SetTag(s string) *DiaryUpdateOne {
	duo.mutation.SetTag(s)
	return duo
}

// SetNillableTag sets the "tag" field if the given value is not nil.
func (duo *DiaryUpdateOne) SetNillableTag(s *string) *DiaryUpdateOne {
	if s != nil {
		duo.SetTag(*s)
	}
	return duo
}

// Mutation returns the DiaryMutation object of the builder.
func (duo *DiaryUpdateOne) Mutation() *DiaryMutation {
	return duo.mutation
}

// Where appends a list predicates to the DiaryUpdate builder.
func (duo *DiaryUpdateOne) Where(ps ...predicate.Diary) *DiaryUpdateOne {
	duo.mutation.Where(ps...)
	return duo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (duo *DiaryUpdateOne) Select(field string, fields ...string) *DiaryUpdateOne {
	duo.fields = append([]string{field}, fields...)
	return duo
}

// Save executes the query and returns the updated Diary entity.
func (duo *DiaryUpdateOne) Save(ctx context.Context) (*Diary, error) {
	return withHooks(ctx, duo.sqlSave, duo.mutation, duo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (duo *DiaryUpdateOne) SaveX(ctx context.Context) *Diary {
	node, err := duo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (duo *DiaryUpdateOne) Exec(ctx context.Context) error {
	_, err := duo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (duo *DiaryUpdateOne) ExecX(ctx context.Context) {
	if err := duo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (duo *DiaryUpdateOne) sqlSave(ctx context.Context) (_node *Diary, err error) {
	_spec := sqlgraph.NewUpdateSpec(diary.Table, diary.Columns, sqlgraph.NewFieldSpec(diary.FieldID, field.TypeString))
	id, ok := duo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Diary.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := duo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, diary.FieldID)
		for _, f := range fields {
			if !diary.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != diary.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := duo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := duo.mutation.DeletedAt(); ok {
		_spec.SetField(diary.FieldDeletedAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedDeletedAt(); ok {
		_spec.AddField(diary.FieldDeletedAt, field.TypeInt64, value)
	}
	if duo.mutation.DeletedAtCleared() {
		_spec.ClearField(diary.FieldDeletedAt, field.TypeInt64)
	}
	if value, ok := duo.mutation.CreatedAt(); ok {
		_spec.SetField(diary.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedCreatedAt(); ok {
		_spec.AddField(diary.FieldCreatedAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.UpdatedAt(); ok {
		_spec.SetField(diary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedUpdatedAt(); ok {
		_spec.AddField(diary.FieldUpdatedAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.Title(); ok {
		_spec.SetField(diary.FieldTitle, field.TypeString, value)
	}
	if value, ok := duo.mutation.Content(); ok {
		_spec.SetField(diary.FieldContent, field.TypeString, value)
	}
	if value, ok := duo.mutation.BelongAt(); ok {
		_spec.SetField(diary.FieldBelongAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.AddedBelongAt(); ok {
		_spec.AddField(diary.FieldBelongAt, field.TypeInt64, value)
	}
	if value, ok := duo.mutation.UserID(); ok {
		_spec.SetField(diary.FieldUserID, field.TypeString, value)
	}
	if value, ok := duo.mutation.Tag(); ok {
		_spec.SetField(diary.FieldTag, field.TypeString, value)
	}
	_node = &Diary{config: duo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, duo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{diary.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	duo.mutation.done = true
	return _node, nil
}
